package ex02;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;

/*
Q, 컬렉션 set에 저장된 객체를 이름으로 검색하자.
해당 정보가 있으면 해당 어벤져스의 정보를 출력하고 없으면 "해당 영웅은 없어요ㅜㅜ" 라는 
메시지 출력해야 한다. 검색 부분은 Iterator를 통해 구현하도록 한다.
set계열의 컬렉션은 기본적으로 중복저장을 허용하지 않는다.
그러나 아래와 같이 새롭게 정의한 클래스에 대해서는 equals(), hashCode() 
메소드를 적절히 오버라이딩 처리해야 중복을 제거할 수 있다.
메소드 오버라이딩을 통해 hero4 는 입력되지 않도록 Avengers 클래스를 업데이트 하시오.*/
class QuHashSet
{
	// 이름, 닉네임, 무기로 멤버 변수를 나눠준다.
	String name;
	String heroName;
	String weapon;

	// 생성자(매개변수)
	public QuHashSet(String name, String heroName, String weapon)
	{
		this.name = name;
		this.heroName = heroName;
		this.weapon = weapon;
	}

	@Override // (이름, 닉네임 이런 식으로 구분하기 위해 오버라이딩이 필요하다)
	public String toString()
	{
		return "Avengers [본명=" + name + ", 닉네임=" + heroName + ", " + "능력=" + weapon + "]";
	}
	
	@Override
	public int hashCode() 
	{
		int num = java.util.Objects.hash(name); 
		//Object 클래스에 상속된 name을 nume에 넣고 해쉬코드를 반환한다.
		// here1 : -566707385, here2 : 431106087, here3 : -853886273, here4 :-566707385
		return num;
	}
	
	// 데이터 타입이 Object인 obj 값을 받는 equals 메서드
	public boolean equals(Object obj)
	{
		if (obj instanceof QuHashSet)
		{
//			QuHashSet tmp = (QuHashSet) obj;
//			return name.equals(tmp.name);
			return name == ((QuHashSet)obj).name; 
		
		}
		return false;
	}
	
	
	// 마지막으로 출력할 양식을 만들어준다.
	public void showAllData()
	{
		System.out.println("Avengers [본명=" + name + ", 닉네임=" + heroName + ", 능력=" + weapon + "]");
	}

	public static void main(String[] args)
	{

		HashSet<QuHashSet> set = new HashSet<QuHashSet>();

		QuHashSet hero1 = new QuHashSet("토니스타크", "아이언맨", "Mark-48 수트");
		QuHashSet hero2 = new QuHashSet("스티브로져스", "캡틴아메리카", "비브라늄 방패");
		QuHashSet hero3 = new QuHashSet("브루스배너", "헐크", "강한피부&점프");
		QuHashSet hero4 = new QuHashSet("토니스타크", "아이언맨", "Mark-48 수트");
		
		set.add(hero1);
		set.add(hero2);
		set.add(hero3);
		set.add(hero4);
		System.out.println("[최초 전체 정보출력]");
		// 향상된 for문 HashSet set 변수를 av 변수를 통해 차례대로 값을 가져온다
		for (QuHashSet av : set)
		{
			System.out.println(av.toString());
		}
		//검색한 정보가 존재하는지 확인하기 위한 변수
		boolean isFind = false;
		System.out.println("검색할 이름을 입력하세요: ");
		Scanner scan = new Scanner(System.in);
		String heroc = scan.nextLine();
		
		// 문제의 조건에 따라 Iterator로 전체 조회를 한다.
		Iterator<QuHashSet> itr = set.iterator();
		while (itr.hasNext())
		{
			QuHashSet fr = itr.next();
			/*
			 * 배열의 각 인덱스에 저장된 객체의 참조값을 통해 멤버변수에 접근한다. 
			 * 검색을 위해 입력한 이름과 비교해서 일치하는 경우에만 정보를
			 * 출력한다. 이때 compareTo() 대신 equals() 를 사용해도 된다.
			 */

			// compareTo(fr.name)==0 또는 equals(fr.name) 둘중 하나 아무거나 가능
			// ★★★ 매우 중요, Iterator에서 compareTo을 통해 값을 비교할 수 있다
			// compareTo -> 값이 같다면 0 , 다르다면 음수
			if (heroc.compareTo(fr.name) == 0) // 사용자가 입력한 이름과 HashSet 안의 값, 이름과 같다면?
			{
				fr.showAllData();
				System.out.println("**귀하가 요청하는 정보를 찾았습니다.**");
				// 그리고 변수를 true로 변경한다.
				isFind = true;
			}
		}
		// 만약 검색된 정보가 없다면 아래와같이 출력한다.
		if (isFind == false)
			System.out.println("해당 영웅은 없어요ㅜㅜ");
	}//// end of searchInfo
};
