import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

/*
별명_ID	VARCHAR2(40 BYTE)
비밀번호_PW	VARCHAR2(50 BYTE)
이메일	VARCHAR2(100 BYTE)
생년월일	VARCHAR2(50 BYTE)
성별	VARCHAR2(10 BYTE)
MBTI	VARCHAR2(30 BYTE)
연락처	VARCHAR2(40 BYTE)
가입일	VARCHAR2(100 BYTE)*/

public class B_Login 
{
	JPanel cardPanel;
	B_Login lp;
	ClientHelper cl;
	CardLayout card;
	
	public static void main(String[] args) 
	{
		B_Login lp = new B_Login();
		lp.setFrame(lp);
	}

	public void setFrame(B_Login lpro) 
	{
		JFrame jf = new JFrame();
		jf.setTitle("MBTI 채팅 서비스 [Made By 이해현]");
		LoginPanel lp = new LoginPanel(lpro);
		Join_Member sp = new Join_Member(lpro);
		jf.getContentPane().setLayout(null);
		
		card = new CardLayout();

		cardPanel = new JPanel(card);
		cardPanel.setBounds(0, 0, 534, 661);
		cardPanel.add(lp.mainPanel, "Login");
		cardPanel.add(sp.mainPanel, "Register");
		
		jf.getContentPane().add(cardPanel);
		jf.setSize(550, 700);
		jf.setVisible(true);
	}

	public static Connection getConnection() throws SQLException 
	{
		Connection conn = null;
		
		conn = DriverManager.getConnection("jdbc:oracle:thin:@DESKTOP-QPODGLT:1521:xe", "scott", "TIGER");
		return conn;
	}
}

class LoginPanel extends JPanel implements ActionListener 
{
	ClientHelper cl = new ClientHelper();
	JPanel mainPanel;
	JTextField l1; // 닉네임(별명ID)
	JTextField t2; // 아이피(주소)
	JTextField l3; // 포트 입력
	int port;
	JPasswordField passTextField; // 패스워드 입력창
	JComboBox<String> mbtiComboBox;
	JRadioButton menButton;
	JRadioButton girlButton;
	String mbtig, sex, nickname, room, pass, mbti, ip;
	String userMode = "일반";
	B_Login lp;
	Font font = new Font("회원가입", Font.BOLD, 50);
	JButton loginButton = new JButton("로그인");
	JButton signupButton = new JButton("회원가입");
	JButton pwFindButton = new JButton("비밀번호 변경");

	public LoginPanel(B_Login lp) 
	{
		this.lp = lp;
		this.cl = cl;
		
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayout(5, 0));

		JPanel centerPanel = new JPanel();
		JLabel loginLabel = new JLabel("MBTI 채팅방 입장");
		loginLabel.setForeground(new Color(128, 128, 255));
		loginLabel.setFont(new Font("나눔고딕", Font.BOLD, 30));
		loginLabel.setFont(font);
		centerPanel.add(loginLabel);
		
		JLabel numbLabel = new JLabel("☞ 입장할 방번호 : ");
		numbLabel.setFont(new Font("나눔고딕", Font.BOLD, 20));
		centerPanel.add(numbLabel);
		
		l3 = new JTextField("9999", 10);
		l3.setFont(new Font("나눔고딕", Font.BOLD, 20));
		centerPanel.add(l3);

		JLabel numbLabel01 = new JLabel("ㄴ기본값: 9999 (0 ~ 65535까지)"); //방 번호 설정
		numbLabel01.setFont(new Font("나눔고딕", Font.BOLD, 20));
		centerPanel.add(numbLabel01);
		
		menButton = new JRadioButton("남");
		menButton.setFont(new Font("나눔고딕", Font.BOLD, 17));
		girlButton = new JRadioButton("여");
		girlButton.setFont(new Font("나눔고딕", Font.BOLD, 17));
		ButtonGroup sexGroup = new ButtonGroup();
		sexGroup.add(menButton);
		sexGroup.add(girlButton);
		
		JPanel userPanel = new JPanel();
		
		JLabel ipLabel01 = new JLabel("☞ 주소(IP) : "); //방 번호 설정
		ipLabel01.setFont(new Font("나눔고딕", Font.BOLD, 20));
		userPanel.add(ipLabel01);
		
		t2 = new JTextField("###.###.#.##", 10);
		t2.setFont(new Font("나눔고딕", Font.BOLD, 20));
		userPanel.add(t2);

		JPanel gridBagidInfo = new JPanel(new GridBagLayout());
		gridBagidInfo.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		GridBagConstraints c = new GridBagConstraints();
		
		mbtiComboBox = new JComboBox<String>(
				new String[] {"INTJ", "INTP", "ENTJ", "ENTP", "INFJ",
						"INFP","ENFJ","ENFP","ISTJ","ISFJ",
						"ESTJ","ESFJ","ISTP","ISFP","ESTP","ESFP"});
		
		JLabel mbtiLabel = new JLabel("◆ MBTI : ");
		mbtiLabel.setFont(new Font("나눔고딕", Font.BOLD, 20));
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 0;
		gridBagidInfo.add(mbtiLabel, c);
		
		mbtiComboBox.setFont(new Font("나눔고딕", Font.BOLD, 25));
		c.insets = new Insets(0, 0, 5, 5);
		c.gridx = 1;
		c.gridy = 0;
		gridBagidInfo.add(mbtiComboBox, c);
		
		
		JLabel idLabel = new JLabel("별명(ID) : ");
		idLabel.setFont(new Font("나눔고딕", Font.BOLD, 20));
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 1;
		gridBagidInfo.add(idLabel, c);

		l1 = new JTextField(15);
		c.insets = new Insets(0, 5, 0, 0);
		c.gridx = 1;
		c.gridy = 1;
		gridBagidInfo.add(l1, c);

		JLabel passLabel = new JLabel("비밀번호 : ");
		passLabel.setFont(new Font("나눔고딕", Font.BOLD, 20));
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 2;
		c.insets = new Insets(0, 5, 0, 0);
		gridBagidInfo.add(passLabel, c);

		passTextField = new JPasswordField(15);
		c.insets = new Insets(20, 5, 0, 0);
		c.gridx = 1;
		c.gridy = 2;
		gridBagidInfo.add(passTextField, c);

		JLabel sexLabel = new JLabel("성별 : ");
		sexLabel.setFont(new Font("나눔고딕", Font.BOLD, 20));
		c.insets = new Insets(0, 0, 10, 0);
		c.gridx = 0;
		c.gridy = 3;
		gridBagidInfo.add(sexLabel, c);
		
		c.gridx = 1;
		c.gridy = 3;
		gridBagidInfo.add(menButton, c);

		c.gridx = 2;
		c.gridy = 3;
		gridBagidInfo.add(girlButton, c);
		
		JPanel loginPanel = new JPanel();
		
		loginButton.setFont(new Font("나눔고딕", Font.BOLD, 25));
		loginPanel.add(loginButton);
		loginButton.addActionListener(this);

		JPanel signupPanel = new JPanel();
		signupButton.setFont(new Font("나눔고딕", Font.BOLD, 25));
		signupPanel.add(signupButton);
		
		JPanel pwFind = new JPanel();
		
		pwFindButton.setFont(new Font("나눔고딕", Font.BOLD, 25));
		signupPanel.add(pwFindButton);

		mainPanel.add(centerPanel);
		mainPanel.add(userPanel);
		mainPanel.add(gridBagidInfo);
		mainPanel.add(loginPanel);
		mainPanel.add(signupPanel);
		
		
// =========================== 비밀번호 변경 버튼 ====================================
		pwFindButton.addActionListener(new ActionListener() 
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{				
				new JChangePw(lp);
				pwFindButton.setEnabled(false);
			}
		});
		
// =========================== 회원가입 버튼 ========================================		
		signupButton.addActionListener(new ActionListener() 
		{

			@Override
			public void actionPerformed(ActionEvent e) 
			{
				lp.card.next(lp.cardPanel);
			}
		});
		
		menButton.addActionListener(new ActionListener() 
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{				
				sex = e.getActionCommand();
			}
		});

		girlButton.addActionListener(new ActionListener() 
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				sex = e.getActionCommand();
			}
		});
		
		mbtiComboBox.addActionListener(new ActionListener() 
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				if (e.getSource() == mbtiComboBox) 
				{
					JComboBox mbtiBox = (JComboBox) e.getSource();
					mbtig = (String) mbtiBox.getSelectedItem();
				}
			}
		});	
	}
	
	// =========================== 로그인 버튼 ========================================	
	
	@Override
	public void actionPerformed(ActionEvent e) 
	{
        String str = e.getActionCommand();
	    if(str.equals("로그인")) // 버튼 로그인을 누를 경우
	    {
	    	nickname = l1.getText();
			pass = new String(passTextField.getPassword());
			mbti = mbtig;
			ip = t2.getText();
			port = Integer.parseInt(l3.getText().trim());
			try 
			{			
				String sql_query = String.format("SELECT 비밀번호_PW FROM 회원DB WHERE ((MBTI = '%s' AND 별명_ID ='%s') AND 비밀번호_PW = '%s') AND 성별 = '%s'",
						mbti, nickname, pass, sex);

				Connection conn = lp.getConnection();
				Statement stmt = conn.createStatement();

				ResultSet rset = stmt.executeQuery(sql_query);
				rset.next();
				if (pass.equals(rset.getString(1)))
				{	
					JOptionPane.showMessageDialog(this, "▶ " + "[" + nickname + "]" + "님\n▷ 어서오세요! 환영합니다★", "로그인 성공", 1);	
				   	Socket socket = new Socket(ip, port);					
				 	PrintWriter writer = new PrintWriter(socket.getOutputStream());
				 	writer.println("["+mbti+"]"+ nickname + "("+ sex +")");
				 	writer.flush();
				 	BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				 	String res = reader.readLine();				
					if (!res.equals("die"))
					{
						cl.setSocket(socket);
						cl.clientRun(nickname, res);
						setVisible(false);
						System.out.println("로그인");
						loginButton.setEnabled(false);
						signupButton.setEnabled(false);
						pwFindButton.setEnabled(false);
					}
					else
					{
						JOptionPane.showMessageDialog(this, "서버와 연결이 끊어졌습니다.", "서버 닫힘", 2);
						System.exit(0);
					}					
				}
				else
				{
					JOptionPane.showMessageDialog(this, "계정에 문제가 있습니다.", "로그인 실패", 2);
				}
			}
			catch (IOException e1) 
			{
				e1.printStackTrace();
			}
			catch (SQLException ex) 
			{
				JOptionPane.showMessageDialog(this, "존재하지 않는 계정입니다. 계정을 확인해주세요.", "로그인 실패", 2);
				System.out.println("SQLException" + ex);
			}	

		} 
	}
} // class