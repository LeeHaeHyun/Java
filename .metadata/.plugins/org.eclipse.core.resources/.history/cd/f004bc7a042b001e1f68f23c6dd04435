import java.util.HashSet;

/*
HashSet<E> : Set계열의 컬렉션 
- Set 계열의 인터페이스를 구현한 컬렉션
- 객체가 순서없이 저장된다
- 객체의 중복저장을 허용하지 않는다.
- List가 배열의 특성을 가진다면, Set은 집합의 특성을 가진다
 */
class Student
{
	private String name; // 멤버 변수 + 정보은닉(private)
	private int age;
	
	public Student(String name, int age) // 매개변수 2개가 있는 생성자
	{
		this.name = name;
		this.age = age;
	}
	
	@Override
	public String toString() // 오버라이딩 하지 않으면 hashcode 값이 나옴
	{
		return name + ":" + age;
	}
	
	/*
	Hash Code란, 객체를 식별할 수 있는 유니크한 값.
	 */
	@Override
	public int hashCode() // 나이만 비교
	{
		int num = age % 3; // 3으로 나눈 나머지
		System.out.println(num); // 나이만 비교해서 홍길동과 전우치가 똑같아서 전우치가 빠져서 출력
		return num;
	}
	
	@Override
	public int hashCode() // 이 때는 equals() 호출되지 않음, 해쉬코드 출력
	{
		int num = java.util.Objects.hash(name, age); 
		System.out.println(num); //나이와 이름을 같이 비교하니까 같은게 없어서 모두 출력
		return num;
	}
	
	public boolean equals(Object obj)
	{
		System.out.println("비교를 합니다.");
		// name, age 둘 다 비교 후 먼저 입력한 값이 나오며 하나라도 다르면 비교 안함
		if(age == ((Student)obj).age)
			return true;
		else
			return false;
	}
}

public class Ex07_HashSetEqual
{

	public static void main(String[] args)
	{
		// Object를 기반으로 Set컬렉션을 생성하면 모든 객체를 저장할 수 있다.
		HashSet<Student> set = new HashSet<>();
		
		/*
		객체저장 : add()메소드를 통해 저장되고, 성공하면 true를 반환
		 */
		
		set.add(new Student("홍길동", 20)); // 특정 위치에 입력이 안됨 set.add()는 순서가 없으므로
		set.add(new Student("전우치", 20));
		set.add(new Student("홍길동", 25));
		
		System.out.println("객체 수: " + set.size());

		for(Student s : set)
			System.out.println(s.toString() + '\t');
		
		System.out.println();
		
		// 추가
		/*
		기본 클래스의 객체 중복저장
			: 기본 클래스인 경우 별도의 오버라이딩 없이도 중복이 제거된다
			따라서 아래의 add() 메소드는 false를 반환한다.
		 */
		
		//중복되었기 때문에 저장 실패, 저장 실패로 3개만 출력
		System.out.println(set.add(new Student("홍길동", 25)) ? "저장 성공" : "저장 실패");
		System.out.println("[중복 저장 후 객체수]: " + set.size());
		System.out.println();
		
		/*
		포함 여부 확인
			: set 컬렉션 내에 해당 객체가 있는지만 확인한다.
		 */
		
		System.out.println(set.contains(new Student("홍길동", 25)) ? 
				"\"홍길동\", 25 있음" : "\"홍길동\", 25 없음" );
		
		/*
		객체 삭제
			:set 컬렉션은 인덱스가 없으므로 객체의 참조값을 통해서만 
			삭제할 수 있다.
		 */
		System.out.println(set.remove(new Student("홍길동", 25)) ? 
				"\"홍길동\", 25 삭제 성공" : "\"홍길동\", 25 삭제 실패");
		System.out.println("[중복 삭제 후 객체수]:"+ set.size());
		
		/*
		전체 삭제 
			: list컬렉션과 동일하다.
		 */
		System.out.println("전체 삭제:" + set.removeAll(set));
	}
}
